#include "TestFunctions.h"
#include <iostream>

void TestFunctions::testAES128GCM(byte* P, byte* A, byte* K, byte* IV, byte* C, byte* T, int lenP, int lenA)
{
	std::cout << "Test starting..." << '\n';
	GcmOutput myOutput = AES128GCM::aes128gcmE(IV, P, A, K, lenA, lenP);
	byte* myCipher = myOutput.cipherText;
	byte* myTag = myOutput.tag;
	int i;
	for (i = 0; i < lenP; i++) {
		if (C[i] != myCipher[i]) {
			std::cout << "FAIL CIPHER" << '\n';
			break;
		}
	}
	delete[] C;
	for (i = 0; i < 16; i++) {
		if (T[i] != myTag[i]) {
			std::cout << "FAIL TAG" << '\n';
			break;
		}
	}
	std::cout << "Test finished!" << '\n' << std::endl;
}

void TestFunctions::test54BytePacketAES128GCM()
{
	int lenP = 0, lenA = 70;
	byte* P = new byte[lenP]{};
	byte* A = new byte[lenA]{
		0xD6, 0x09, 0xB1, 0xF0, 0x56, 0x63, 0x7A, 0x0D, 0x46, 0xDF, 0x99, 0x8D, 0x88, 0xE5, 0x22, 0x2A,
		0xB2, 0xC2, 0x84, 0x65, 0x12, 0x15, 0x35, 0x24, 0xC0, 0x89, 0x5E, 0x81, 0x08, 0x00, 0x0F, 0x10,
		0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20,
		0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F, 0x30,
		0x31, 0x32, 0x33, 0x34, 0x00, 0x01
	};
	byte K[16] = {
		0xAD,0x7A,0x2B,0xD0,0x3E,0xAC,0x83,0x5A,0x6F,0x62,0x0F,0xDC,0xB5,0x06,0xB3,0x45
	};
	byte IV[12] = {
		0x12,0x15,0x35,0x24,0xC0,0x89,0x5E,0x81,0xB2,0xC2,0x84,0x65
	};
	byte* C = new byte[0]{};
	byte T[16] = {
		0xF0,0x94,0x78,0xA9,0xB0,0x90,0x07,0xD0,0x6F,0x46,0xE9,0xB6,0xA1,0xDA,0x25,0xDD
	};

	testAES128GCM(P, A, K, IV, C, T, lenP, lenA);
}

void TestFunctions::test60BytePacketAES128GCM()
{
	int lenP = 48, lenA = 28;
	byte* P = new byte[lenP] {
		0x08,0x00,0x0F,0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18,0x19,0x1A,0x1B,0x1C,
		0x1D,0x1E,0x1F,0x20,0x21,0x22,0x23,0x24,0x25,0x26,0x27,0x28,0x29,0x2A,0x2B,0x2C,
		0x2D,0x2E,0x2F,0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x3A,0x00,0x02
	};

	byte* A = new byte[lenA]{
		0xD6,0x09,0xB1,0xF0,0x56,0x63,0x7A,0x0D,0x46,0xDF,0x99,0x8D,0x88,0xE5,0x2E,0x00,
		0xB2,0xC2,0x84,0x65,0x12,0x15,0x35,0x24,0xC0,0x89,0x5E,0x81
	};

	byte K[16] = {
		0xAD,0x7A,0x2B,0xD0,0x3E,0xAC,0x83,0x5A,0x6F,0x62,0x0F,0xDC,0xB5,0x06,0xB3,0x45
	};

	byte IV[12] = {
		0x12,0x15,0x35,0x24,0xC0,0x89,0x5E,0x81,0xB2,0xC2,0x84,0x65
	};

	byte* C = new byte[48]{
		0x70,0x1A,0xFA,0x1C,0xC0,0x39,0xC0,0xD7,0x65,0x12,0x8A,0x66,0x5D,0xAB,0x69,0x24,
		0x38,0x99,0xBF,0x73,0x18,0xCC,0xDC,0x81,0xC9,0x93,0x1D,0xA1,0x7F,0xBE,0x8E,0xDD,
		0x7D,0x17,0xCB,0x8B,0x4C,0x26,0xFC,0x81,0xE3,0x28,0x4F,0x2B,0x7F,0xBA,0x71,0x3D
	};

	byte T[16] = {
		0x4F,0x8D,0x55,0xE7,0xD3,0xF0,0x6F,0xD5,0xA1,0x3C,0x0C,0x29,0xB9,0xD5,0xB8,0x80
	};

	testAES128GCM(P, A, K, IV, C, T, lenP, lenA);
}

void TestFunctions::test75BytePacketAES128GCM()
{
	int lenP = 63, lenA = 20;

	byte* P = new byte[lenP]{
		0x08,0x00,0x0F,0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18,0x19,0x1A,0x1B,0x1C,
		0x1D,0x1E,0x1F,0x20,0x21,0x22,0x23,0x24,0x25,0x26,0x27,0x28,0x29,0x2A,0x2B,0x2C,
		0x2D,0x2E,0x2F,0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x3A,0x3B,0x3C,
		0x3D,0x3E,0x3F,0x40,0x41,0x42,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x00,0x08
	};

	byte* A = new byte[lenA]{
		0x68,0xF2,0xE7,0x76,0x96,0xCE,0x7A,0xE8,0xE2,0xCA,0x4E,0xC5,0x88,0xE5,0x4D,0x00,
		0x2E,0x58,0x49,0x5C
	};

	byte K[16] = {
		0x88,0xEE,0x08,0x7F,0xD9,0x5D,0xA9,0xFB,0xF6,0x72,0x5A,0xA9,0xD7,0x57,0xB0,0xCD
	};

	byte IV[12] = {
		0x7A,0xE8,0xE2,0xCA,0x4E,0xC5,0x00,0x01,0x2E,0x58,0x49,0x5C
	};

	byte* C = new byte[lenP]{
		0xC3,0x1F,0x53,0xD9,0x9E,0x56,0x87,0xF7,0x36,0x51,0x19,0xB8,0x32,0xD2,0xAA,0xE7,
		0x07,0x41,0xD5,0x93,0xF1,0xF9,0xE2,0xAB,0x34,0x55,0x77,0x9B,0x07,0x8E,0xB8,0xFE,
		0xAC,0xDF,0xEC,0x1F,0x8E,0x3E,0x52,0x77,0xF8,0x18,0x0B,0x43,0x36,0x1F,0x65,0x12,
		0xAD,0xB1,0x6D,0x2E,0x38,0x54,0x8A,0x2C,0x71,0x9D,0xBA,0x72,0x28,0xD8,0x40
	};

	byte T[16] = {
		0x88,0xF8,0x75,0x7A,0xDB,0x8A,0xA7,0x88,0xD8,0xF6,0x5A,0xD6,0x68,0xBE,0x70,0xE7
	};

	testAES128GCM(P, A, K, IV, C, T, lenP, lenA);
}

void TestFunctions::testAllAES128GCM()
{
	std::cout << "54 Bytes Test" << '\n';
	test54BytePacketAES128GCM();
	std::cout << "60 Bytes Test" << '\n';
	test60BytePacketAES128GCM();
	std::cout << "70 Bytes Test" << '\n';
	test75BytePacketAES128GCM();
}
